<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
    
    <entry>
      <title><![CDATA[我的2016]]></title>
      <url>http://github.com/Eamonnzhang/2016/12/24/%E6%88%91%E7%9A%842016/</url>
      <content type="html"><![CDATA[<img src="http://ww2.sinaimg.cn/large/71d81503jw1fb1xk56z3gj21kw0w0wgl.jpg" class="full-image">
<a id="more"></a>
<p>2016年在我的人生中可能是比较重要的一年。<br>这一年从校园走向社会、从学习走向工作、从不会到会。</p>
<h2 id="选择"><a href="#选择" class="headerlink" title="选择"></a>选择</h2><p>由于大四实习工作的经验的原因，我还是选择了前端作为自己人生工作的起点。<br>其实在工作之前，我对前端的实践很少很少，大四实习的经验基本也局限于NodeJs服务端和JavaScript的一些原生写法，我对HTML以及CSS的实践程度基本为0。<br>可是面试总归是有规律可循的，上半年面试了同程旅游、网易、去哪儿网、珑凌科技等公司，同程旅游和珑凌科技过了，其他很遗憾的没过，特别是网易三面虽然都过了，最终也是和网易擦肩而过，期间也总结出了一些自己的面试经验。最后选择了郑州珑凌科技有限公司。</p>
<h2 id="收获"><a href="#收获" class="headerlink" title="收获"></a>收获</h2><h3 id="基本切图"><a href="#基本切图" class="headerlink" title="基本切图"></a>基本切图</h3><p>工作之后的第一件“大事”就是学习切图，利用HTML+CSS+JavaScript还原设计稿，像素误差不能超过5px。<br>在这个过程中，会把HTML和CSS基础夯实，也学会了怎么去写一些动画，包括接触到一些canvas相关的特效，three.js等，你会惊叹各种页面神奇的特效，发现光动画这一块儿，就够自己研究好几年的了。<br>学会了怎么布局页面，CSS怎么分模块来写，把常用的一些CSS模块分离出来，扎实了CSS盒子模型，CSS的一些浏览器的兼容性问题怎么解决。</p>
<h3 id="自动化构建"><a href="#自动化构建" class="headerlink" title="自动化构建"></a>自动化构建</h3><p>在切图的过程中，你会发现自己的写的效率逐渐降低，于是不得不上手一些自动化构建工具，工作中我主要接触使用了gulp。利用gulp和browserSync搭建了一个能够自动监控文件变化并事实刷新的前端开发环境。</p>
<h3 id="CSS预处理"><a href="#CSS预处理" class="headerlink" title="CSS预处理"></a>CSS预处理</h3><p>使用了SCSS工具，最接近原生CSS写法的预处理器。 </p>
<h3 id="模块化编程"><a href="#模块化编程" class="headerlink" title="模块化编程"></a>模块化编程</h3><p>对于略微复杂的前端项目，会用RequireJS来写，初步学会了如何分模块写JS文件。<br>学会写一些简单的类似Dialog的组件，并把工作中经常要写的一个动画侧边栏组件抽象了出来，写了一个侧边栏组件——AnimatedSideNav，放在了自己的Github上。</p>
<h3 id="组件化开发"><a href="#组件化开发" class="headerlink" title="组件化开发"></a>组件化开发</h3><p>公司业务受限，只能自学组件化开发，初步入门了组件化开发思想，并在知乎提出了自己对于组件化开发的疑问。学了一段Vue，并结合ElementUI实现了一个非常简单的TodoMVC。</p>
<h3 id="ES6"><a href="#ES6" class="headerlink" title="ES6"></a>ES6</h3><p>学习了一段ES6，但是实践程度还远远不够，只在一些小项目里用过。</p>
<h3 id="移动端页面"><a href="#移动端页面" class="headerlink" title="移动端页面"></a>移动端页面</h3><p>写过一个，但是很遗憾没有上线，不过也初步接触了移动端和PC端页面构建的区别，（rem以及scss计算函数使用）。</p>
<h3 id="知乎的Live"><a href="#知乎的Live" class="headerlink" title="知乎的Live"></a>知乎的Live</h3><p>参加了几场知乎关于前端的Live，收获不少，也更明确了自己的方向。</p>
<h3 id="MBP"><a href="#MBP" class="headerlink" title="MBP"></a>MBP</h3><p>圣诞节期间送了自己一台MBP。</p>
<h2 id="反思"><a href="#反思" class="headerlink" title="反思"></a>反思</h2><h3 id="学习浮躁"><a href="#学习浮躁" class="headerlink" title="学习浮躁"></a>学习浮躁</h3><p>在工作过程中，虽然学的也快，但是会发现自己以往的学习方法还是太过浮躁。<br>很多基础的概念虽然知道，但是很难用自己的话向别人解释清楚，或者自己彻底理解。<br>所以现在一有空，就会重拾那些基础，沉下心来慢慢看，然后用自己的话写成博客记录下来，<br>首先得把自己能讲明白了，才能给别人讲明白。</p>
<h3 id="碎片化时间"><a href="#碎片化时间" class="headerlink" title="碎片化时间"></a>碎片化时间</h3><p>由于工作负载不均衡，有时候一停下来，会不知道做什么，经常随便浏览看看各大技术论坛，来消磨自己的时间。<br>其实自己吸收的很少，所以这种事情应该少做。<br>目前我的做法是这样的：把自己准备写的博客文章标题记录下来，哪一天有空闲时间，就会去查询相关资料，<br>完成一篇博客，充分利用这些碎片化时间，而且完成一篇博客，会有些许成就感，正向反馈自己。（感谢小爝的Live指导）</p>
<h2 id="2017加油↖-ω-↗"><a href="#2017加油↖-ω-↗" class="headerlink" title="2017加油↖(^ω^)↗"></a>2017加油↖(^ω^)↗</h2>]]></content>
      
        <categories>
            
            <category> 活着 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 随笔 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[JavaScript闭包]]></title>
      <url>http://github.com/Eamonnzhang/2016/12/22/JavaScript%E9%97%AD%E5%8C%85/</url>
      <content type="html"><![CDATA[<img src="http://ww1.sinaimg.cn/large/71d81503jw1fazo2cimhgj20cj08cglz.jpg" class="full-image">
<a id="more"></a>
<h2 id="什么是闭包？"><a href="#什么是闭包？" class="headerlink" title="什么是闭包？"></a>什么是闭包？</h2><p>闭包，又称词法闭包或函数闭包，是引用了自由变量的函数。这个被引用的自由变量和这个函数一同存在，即使已经离开了创造它的环境也不例外。<br>JS中闭包实现实例</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="keyword">var</span> temp = <span class="number">3</span>;</div><div class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">        <span class="built_in">console</span>.log(temp++);</div><div class="line">     &#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> bar = foo();</div><div class="line">bar(); <span class="comment">//3</span></div><div class="line">bar(); <span class="comment">//4</span></div></pre></td></tr></table></figure>
<p>上述例子中，<code>bar</code> 就是闭包，它引用了自由变量 <code>temp</code> ，<br>并且即使离开了创造它的环境（ <code>foo()</code> 函数已经执行完毕），自由变量（ <code>temp</code> ）和这个函数（ <code>bar</code> ）也一同存在。</p>
<h2 id="闭包应用场景"><a href="#闭包应用场景" class="headerlink" title="闭包应用场景"></a>闭包应用场景</h2><p>闭包内，变量无法释放，只要 <code>bar</code> 一直存在，<code>temp</code> 就不会释放，而且只能通过 <code>bar</code> 来改变 <code>temp</code> 的值，<br>所以我们可以利用闭包来实现以下这些功能：<br>1、管理私有变量<br>2、实现函数的柯里化和反柯里化</p>
<h3 id="函数柯里化（Currying）"><a href="#函数柯里化（Currying）" class="headerlink" title="函数柯里化（Currying）"></a>函数柯里化（Currying）</h3><p>函数柯里化就是把接受多个参数的函数变成接受一个单一参数（最初函数的第一个参数）的函数，并且返回接受余下的参数而且返回结果的新函数的技术。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> addTwo = <span class="function"><span class="keyword">function</span>(<span class="params">x,y</span>)</span>&#123;</div><div class="line">        <span class="keyword">return</span> x+y</div><div class="line">&#125;</div><div class="line">addTwo(<span class="number">5</span>,<span class="number">10</span>) <span class="comment">//15</span></div></pre></td></tr></table></figure></p>
<p>将addTwo柯里化之后就是：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> addTwoCurry = <span class="function"><span class="keyword">function</span>(<span class="params">x</span>)</span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">y</span>)</span>&#123;</div><div class="line">        <span class="keyword">return</span> x+y      </div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line">addTwoCurry(<span class="number">5</span>)(<span class="number">10</span>) <span class="comment">//15</span></div></pre></td></tr></table></figure>
<p>或者：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> add5 = addTwoCurry(<span class="number">5</span>);</div><div class="line">add5(<span class="number">10</span>) <span class="comment">//15</span></div><div class="line"><span class="keyword">var</span> add6 = addTwoCurry(<span class="number">6</span>);</div><div class="line">add6(<span class="number">10</span>) <span class="comment">//16</span></div></pre></td></tr></table></figure>
<p><strong>通用的currying函数</strong></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">currying(fn,args);</div><div class="line"><span class="comment">//参数fn为你想要柯里化的函数</span></div><div class="line"><span class="keyword">var</span> currying = <span class="function"><span class="keyword">function</span>(<span class="params">fn</span>)</span>&#123;</div><div class="line">    <span class="keyword">var</span> args = [].prototype.slice.call(<span class="built_in">arguments</span>,<span class="number">1</span>)<span class="comment">//获取currying传进来的非fn的所有参数</span></div><div class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">       <span class="keyword">var</span> nArgs = args.concat(<span class="built_in">Array</span>.prototype.slice.call(<span class="built_in">arguments</span>)); <span class="comment">// 把之前传的柯里化的参数和之后调用柯里化函数的参数拼接在一起</span></div><div class="line">        fn.apply(<span class="literal">null</span>,nArgs); <span class="comment">//实际上最后执行的还是，一个函数调用所有的参数</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="函数的反柯里化"><a href="#函数的反柯里化" class="headerlink" title="函数的反柯里化"></a>函数的反柯里化</h3><p>我们在写代码的过程中，经常会遇到一些 “类数组对象”，比如 <code>HTMLColleciton</code> 或者 <code>arguments</code> ，他们没有原生的 <code>Array</code> 方法，<br>有一个技巧就是通过，<code>[].method.call(likeArray,arg)</code> ; 来使类数组对象调用Array的原生方法<br>但是我们每次调用的时候，都需要写一遍 <code>[].method.call()</code> 或者 <code>Array.prototype.method.call()</code>，比较麻烦。<br>因此我们可以利用反柯里化，把这些方法进行反柯里化处理，从而让更多的对象能够调用这个方法。</p>
<p><strong>通用的uncurrying函数</strong></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">Function</span>.prototype.uncurrying = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="keyword">var</span> _this = <span class="keyword">this</span>; <span class="comment">//获取你想要 反柯里化 的函数</span></div><div class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="built_in">Function</span>.prototype.call.apply(_this,<span class="built_in">arguments</span>) <span class="comment">//然后利用call改变this指向，并接受参数调用</span></div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> obj = &#123;&#125;</div><div class="line"><span class="keyword">var</span> push = <span class="built_in">Array</span>.prototype.push.uncurrying()</div><div class="line">push(obj,<span class="string">'a'</span>)</div><div class="line">obj <span class="comment">//&#123;0:'a',length:1&#125;</span></div></pre></td></tr></table></figure>
<h2 id="延伸阅读（JS闭包的实现）"><a href="#延伸阅读（JS闭包的实现）" class="headerlink" title="延伸阅读（JS闭包的实现）"></a>延伸阅读（JS闭包的实现）</h2><p>作者：wyatt-pan<br>链接：<a href="https://www.zhihu.com/question/19554716/answer/12763637" target="_blank" rel="external">https://www.zhihu.com/question/19554716/answer/12763637</a><br>来源：知乎<br>著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</p>
<blockquote>
<p>JavaScript 中的闭包实现与 JavaScript 的 Scope Chain 是密不可分的. 首先在 JavaScript 的执行中会一直存在一个 Execute Context Stack (想想 JavaScript 解释器在看到一个 alert(x) 的时候, 如果没有上下文他怎么知道这个 x 是什么?), Execute Context Stack 中最下面一个一定是 GlobalContext, 而在每一个函数的执行开始就会向这个 stack 中压入一个此 Function 的 Execution Context; 而一个 Execution Context 的组成分为三部分: </p>
<ol>
<li>Variable Object: 存储方法内的变量 vars, 方法传入的参数, 函数内定义的函数等等(函数表达式不保存), Variable Object 在任何时候是不可以被直接访问到的, 当然不同的 JS 引擎提供了访问接口就说不定了;</li>
<li>Scope Chain: 这个函数执行的时候用以寻找值的 Scope Chain, 这个 Scope Chain 由 Variable Object + All Parent Scopes 组成, Variable Object 会放在这个 Scope Chain 的最前面, 这也是为什么函数内的变量会被最先找到;</li>
<li>thisValue, 函数被调用的时候的 this 对象, 存储的就是函数的调用者(caller)的引用; </li>
</ol>
<p>对于 Variable Object 在不同的情况下会有不同的定义, 例如在全局的时候被称为 Global Object, 而在函数中则被称为 Activation Object 激活对象; </p>
<p>正是由于有了 Execution Context 中的 Scope Chain, JavaScript 才能够使得在方法 bar()<br>的内部访问到方法 foo() 中的变量 a, 才能够使方法 bar() 将变量 a 关闭在自己的作用范围内不让他随 foo() 方法的执行完毕而销毁;</p>
</blockquote>
<h2 id="有趣的闭包图解"><a href="#有趣的闭包图解" class="headerlink" title="有趣的闭包图解"></a>有趣的闭包图解</h2><p><img src="http://ww2.sinaimg.cn/large/71d81503jw1fazohxws3fj20go09dabi.jpg" alt=""><br>最后用阮一峰大神的文章问题结尾：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> name = <span class="string">"The Window"</span>;</div><div class="line"><span class="keyword">var</span> object = &#123;</div><div class="line">　　<span class="attr">name</span> : <span class="string">"My Object"</span>,</div><div class="line">　　<span class="attr">getNameFunc</span> : <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">　　　　<span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">　　　　　　<span class="keyword">return</span> <span class="keyword">this</span>.name;</div><div class="line">　　　　&#125;;</div><div class="line">　　&#125;</div><div class="line">&#125;;</div><div class="line">alert(object.getNameFunc()()); <span class="comment">//'The Window'</span></div></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> name = <span class="string">"The Window"</span>;</div><div class="line"><span class="keyword">var</span> object = &#123;</div><div class="line">　　<span class="attr">name</span> : <span class="string">"My Object"</span>,</div><div class="line">　　<span class="attr">getNameFunc</span> : <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">　　　　<span class="keyword">var</span> that = <span class="keyword">this</span>;</div><div class="line">　　　　<span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">　　　　　　<span class="keyword">return</span> that.name;</div><div class="line">　　　　&#125;;</div><div class="line">　　&#125;</div><div class="line">&#125;;</div><div class="line">alert(object.getNameFunc()()); <span class="comment">//'My Object</span></div></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> 学着 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[细说JS原型链]]></title>
      <url>http://github.com/Eamonnzhang/2016/12/16/%E7%BB%86%E8%AF%B4JS%E5%8E%9F%E5%9E%8B%E9%93%BE/</url>
      <content type="html"><![CDATA[<img src="http://ww2.sinaimg.cn/large/71d81503jw1fasunkmgzyj20ku0bpmzt.jpg" class="full-image">
<a id="more"></a>
<h2 id="什么是原型链"><a href="#什么是原型链" class="headerlink" title="什么是原型链"></a>什么是原型链</h2><p>在JavaScript中，每个对象都有一个指向它的原型（prototype）对象的内部链接。这个原型对象又有自己的原型，直到某个对象的原型为null为止（也就是不再有原型指向），组成这条链的最后一环。这种一级一级的链结构称为原型链（prototype chain）。</p>
<h2 id="prototype的由来"><a href="#prototype的由来" class="headerlink" title="prototype的由来"></a>prototype的由来</h2><p>为什么JS的设计者要设计一个prototype呢，就是为了让JS能够实现继承机制。那为什么不像C++或者Java那样引入“父类”或者“子类”的概念呢，因为最初JS的发明者认为JS只是一门简单的语言，不想让JS正式的成为一门非常标准的面向对象编程语言，会增加初学者的入门难度。（不过随着互联网的快速发展，JS越来越重要，这个最初想让其看起来简单的原型链，却适得其反的增加了很多初学者的入门难度，ES6的很多语法糖让其看起来更容易理解，不过JS继承的本质还是基于原型链）</p>
<h2 id="proto-VS-prototype"><a href="#proto-VS-prototype" class="headerlink" title="__proto__ VS prototype"></a>__proto__ VS prototype</h2><blockquote>
<p>根据 ECMAScript 标准，someObject.[[Prototype]] 符号是用于指派 someObject 的原型。这个等同于 JavaScript 的 <strong>proto</strong>  属性（现已弃用）。从 ECMAScript 6 开始, [[Prototype]] 可以用Object.getPrototypeOf()和Object.setPrototypeOf()访问器来访问。</p>
</blockquote>
<p>（<code>__proto__</code>已经被弃用，但是为了方便讲解，还是用它来表示一下原型指向）</p>
<p>简单来说：<br><code>__proto__</code>实际上是对象用来查找其原型链上的方法、属性等等的引用对象；<br><code>prototype</code> 是当你用 <code>new</code> 关键字来创建实例对象的时候，被用来构建实例对象的 <code>__proto__</code> 的。<br>如果你觉得难以理解，不妨看看下面的描述：<br><code>prototype</code> 是函数对象（Function object）的一个属性，它是由这个函数对象创建的所有的实例对象的原型（公用）；<br><code>__proto__</code>是一个对象的内置属性，指向构造它的函数的 <code>prototype</code> ，<code>__proto__</code>存在于每个对象中，而 <code>prototype</code> 只有函数对象才有。</p>
<h2 id="原型链指向"><a href="#原型链指向" class="headerlink" title="原型链指向"></a>原型链指向</h2><p>举个例子：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Foobar</span>(<span class="params"></span>)</span>&#123;&#125;</div><div class="line"><span class="keyword">var</span> foobar = <span class="keyword">new</span> Foobar()</div></pre></td></tr></table></figure>
<p>请分别描述 <code>Foobar</code> 和 <code>foobar</code> 的原型链。</p>
<p><strong>Foobar:</strong></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">Foobar.__proto__ =&gt;  <span class="built_in">Function</span>.prototype</div><div class="line"><span class="built_in">Function</span>.prototype.__proto__ =&gt; <span class="built_in">Object</span>.prototype</div><div class="line"><span class="built_in">Object</span>.prototype.__proto__ =&gt;  <span class="literal">null</span></div></pre></td></tr></table></figure>
<p><strong>foobar:</strong></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">foobar.__proto__  =&gt; Foo.prototype</div><div class="line">Foo.prototype.__proto__ =&gt;  <span class="built_in">Object</span>.prototype</div><div class="line"><span class="built_in">Object</span>.prototype.__proto__ =&gt; <span class="literal">null</span></div></pre></td></tr></table></figure>
<p>原型链大致可以分为两类(是否经过Function.prototype)，</p>
<blockquote>
<p><strong>一个是普通实例对象的原型链，会沿着它的构造函数原型一直到头（不会经过Function.prototype）</strong><br><strong>一个是函数的原型链，会经过Function.prototype一直到头</strong></p>
</blockquote>
<p>引用来自 <a href="https://blog.oyanglul.us/javascript/understand-prototype.html#orgheadline1" target="_blank" rel="external">Jichao Ouyang</a> 的博客的一张图:<br><img src="http://ww4.sinaimg.cn/large/71d81503jw1fasuwfh5mcj218w0wsahj.jpg" alt=""></p>
<p>这里有个很让人困惑的东西，<code>Object.__proto__</code> 指向了 <code>Function.prototype</code> 而 <code>Function.prototype.__proto__</code> 又指向了 <code>Object.prototype</code>。<br>为了避免混乱，你只需要记住，JS中所有的对象都是由Object衍生的对象，所有的对象都继承了<code>Object.prototype</code>的方法和属性。<br>也就是说 <code>new Object()</code> 中的 Object 实际上是 Function 构造出来的，这就会产生理解上的歧义，刚才还说所有的对象都是Object衍生的，为啥这里的Object是Function构造出来的呢，我个人理解为，Object和Object.prototype不是一回事。<br>你也会发现，<code>Function instanceof Object</code> 和 <code>Object instanceof Function</code> 结果都为true，也就是说，他们都能够在各自的原型链中找到对方</p>
<h2 id="instanceof-VS-typeof"><a href="#instanceof-VS-typeof" class="headerlink" title="instanceof VS typeof"></a>instanceof VS typeof</h2><p>第三部分提到了 instanceof ，其用法如下所示：<br>object instanceof constructor<br>MDN官方解释为，instanceof 运算符用来测试object在其原型链中是否存在constructor的prototype属性。<br>因此这个值不是一成不变的，比如<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> foo = <span class="keyword">new</span> Foo();</div><div class="line">foo <span class="keyword">instanceof</span> Foo <span class="comment">//true</span></div><div class="line">foo.__proto__ = &#123;&#125;</div><div class="line">foo <span class="keyword">instanceof</span> Foo <span class="comment">//false</span></div></pre></td></tr></table></figure></p>
<p>JS中还有一个操作符，<code>typeof</code><br>该操作符返回一个字符串，指示未经计算的操作数的类型<br><img src="http://ww4.sinaimg.cn/large/71d81503jw1fasv3rxlroj20dj09sjso.jpg" alt=""></p>
<p>其返回结果只有表格中的几种<br>这里需要注意</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">typeof</span> <span class="built_in">Object</span></div><div class="line"><span class="keyword">typeof</span> <span class="built_in">Function</span></div><div class="line"><span class="keyword">typeof</span> <span class="built_in">String</span></div><div class="line"><span class="keyword">typeof</span> <span class="built_in">Boolean</span></div><div class="line"><span class="keyword">typeof</span> <span class="built_in">Number</span></div></pre></td></tr></table></figure>
<p>他们的返回结果都是 <code>&#39;function&#39;</code></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> s1 = <span class="keyword">new</span> <span class="built_in">String</span>(<span class="string">'abc'</span>)</div><div class="line"><span class="keyword">var</span> s2 = <span class="string">'abc'</span></div><div class="line"><span class="keyword">typeof</span> s1 <span class="comment">//'object'</span></div><div class="line"><span class="keyword">typeof</span> s2 <span class="comment">//‘string’</span></div></pre></td></tr></table></figure>
<p>所以通过JS的内置对象new出来的类型，诸如<code>new String</code>、<code>new Number</code>他们还是一个引用类型，<code>typeof</code> 返回的结果依然是 <code>“object”</code>而不是其对应的基本类型<br>只有通过直接量赋值的变量，诸如<code>var a = 1</code>,<code>var s = &#39;abc&#39;</code><br><code>typeof</code> 才会返回其基本类型 </p>
<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Inheritance_and_the_prototype_chain" target="_blank" rel="external">MDN</a><br><a href="https://blog.oyanglul.us/javascript/understand-prototype.html#orgheadline1" target="_blank" rel="external">Jichao Ouyang的个人博客</a><br><a href="http://www.ruanyifeng.com/blog/2011/06/designing_ideas_of_inheritance_mechanism_in_javascript.html" target="_blank" rel="external">阮一峰老师的博客</a></p>
]]></content>
      
        <categories>
            
            <category> 学着 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[科学上网]]></title>
      <url>http://github.com/Eamonnzhang/2016/01/29/%E7%A7%91%E5%AD%A6%E4%B8%8A%E7%BD%91/</url>
      <content type="html"><![CDATA[<img src="http://ww4.sinaimg.cn/large/71d81503gw1f0g3rmdorwj20go0aa417.jpg" class="full-image">
<a id="more"></a>
<p>突破 <strong>GFW</strong> 有很多种方式：VPN以及各种翻墙工具。当然如果你任性的话，出国上网是最好的翻墙方式。</p>
<p>其实很多墙内患者最常用的方式还是更改 <strong>hosts</strong> 了，好用不贵。</p>
<h3 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h3><p>其实有一点计算机网络基础的人都应该知道，我们输入域名之后，访问这个网站首先要通过 DNS 解析成IP 才能找到对应的目标主机。GFW 的封锁方法之一就是通过污染 DNS，使你输入的域名无法解析为正确的 IP 地址，从而无法使我们链接到正确的服务器来获取我们想要的信息。<br>而 hosts 是用来提高 DNS 解析效率的。在各大 OS （Android、Windows、Mac、IOS和Linux）中，会先通过 hosts 文件来解析域名的 IP 地址，如果 hosts 文件没有该域名对应的 IP，则才会在通过被污染的 DNS 服务器来寻找。也就是说，hosts 让我们跳过了 DNS 服务器解析这一步，从而使我们翻墙成功。</p>
<h3 id="资源"><a href="#资源" class="headerlink" title="资源"></a>资源</h3><p>这里提供两个极全、极有效的 hosts 资源，总有一个能上：</p>
<blockquote>
<p>老D博客：<a href="http://laod.cn/hosts/2016-google-hosts.html" target="_blank" rel="external">hosts</a><br>racaljk：<a href="https://github.com/racaljk/hosts">hosts</a> —— 来自GitHub</p>
</blockquote>
<p>感谢作者！</p>
<h3 id="担忧"><a href="#担忧" class="headerlink" title="担忧"></a>担忧</h3><p>如果 GFW 从 IP 层封锁，hosts 也将无法使用。事实上，现在GFW 也开始这么做了。<br>毕竟我们的心愿是 世界和平….. </p>
]]></content>
      
        <categories>
            
            <category> 折腾着 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 翻墙 </tag>
            
            <tag> hosts </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[CSS居中：完全指南（译）]]></title>
      <url>http://github.com/Eamonnzhang/2016/01/28/CSS%E5%B1%85%E4%B8%AD%EF%BC%9A%E5%AE%8C%E5%85%A8%E6%8C%87%E5%8D%97%EF%BC%88%E8%AF%91%EF%BC%89/</url>
      <content type="html"><![CDATA[<p>译自CSS-TRICKS上的一篇文章：<a href="https://css-tricks.com/centering-css-complete-guide/" target="_blank" rel="external">Centering in CSS: A Complete Guide</a>。<br>以下为译文：</p>
<p>CSS的居中是众多CSS难点的代表。为啥用CSS居中这么难呢？但是我认为这个问题其实并没有那么难啦，就是有很多种不同的方式可以达到居中的目的，这取决于不同的情景，很难说用哪一种方式去实现居中。<br>所以就让我们做一个决策树，希望能使这个问题简单一点吧~<br><a id="more"></a></p>
<h2 id="水平居中"><a href="#水平居中" class="headerlink" title="水平居中"></a>水平居中</h2><h3 id="行内或者具有行内元素性质的元素（比如文字或者链接）？"><a href="#行内或者具有行内元素性质的元素（比如文字或者链接）？" class="headerlink" title="行内或者具有行内元素性质的元素（比如文字或者链接）？"></a>行内或者具有行内元素性质的元素（比如文字或者链接）？</h3><p>让一个父元素为块级元素的行内元素水平居中，可以：<br>CSS:<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.center-children</span> &#123;</div><div class="line">    <span class="attribute">text-align</span>: center;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="单个块级元素？"><a href="#单个块级元素？" class="headerlink" title="单个块级元素？"></a>单个块级元素？</h3><p>你可以设置块级元素的 <code>margin-left</code> 和 <code>margin-right</code> 为 <code>auto</code> 来使它水平居中（这个块级元素是被设置了一个 <code>width</code> 属性了，否则它会占满宽度，这时候已经不需要居中了），有一种速记的写法：<br>CSS:<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.center-me</span> &#123;</div><div class="line">    <span class="attribute">margin</span>: <span class="number">0</span> auto;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="多个块级元素？"><a href="#多个块级元素？" class="headerlink" title="多个块级元素？"></a>多个块级元素？</h3><p>如果有两个或者更多的块级元素需要在被一行里水平居中，那么你最好设置他们不同的 <code>display</code> 属性来达到效果了。这里有两个例子：一个是设置为 <code>inline-block</code>， 一个是设置为 <code>flexbox</code> 。<br>HTML:<br><figure class="highlight applescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">&lt;main <span class="built_in">class</span>=<span class="string">"inline-block-center"</span>&gt;</div><div class="line">  &lt;<span class="keyword">div</span>&gt;</div><div class="line">    I'm an element <span class="keyword">that</span> <span class="keyword">is</span> block-like <span class="keyword">with</span> <span class="keyword">my</span> siblings <span class="keyword">and</span> we're centered <span class="keyword">in</span> a row.</div><div class="line">  &lt;/<span class="keyword">div</span>&gt;</div><div class="line">  &lt;<span class="keyword">div</span>&gt;</div><div class="line">    I'm an element <span class="keyword">that</span> <span class="keyword">is</span> block-like <span class="keyword">with</span> <span class="keyword">my</span> siblings <span class="keyword">and</span> we're centered <span class="keyword">in</span> a row. I have more content <span class="keyword">in</span> <span class="keyword">me</span> than <span class="keyword">my</span> siblings do.</div><div class="line">  &lt;/<span class="keyword">div</span>&gt;</div><div class="line">  &lt;<span class="keyword">div</span>&gt;</div><div class="line">    I'm an element <span class="keyword">that</span> <span class="keyword">is</span> block-like <span class="keyword">with</span> <span class="keyword">my</span> siblings <span class="keyword">and</span> we're centered <span class="keyword">in</span> a row.</div><div class="line">  &lt;/<span class="keyword">div</span>&gt;</div><div class="line">&lt;/main&gt;</div><div class="line"></div><div class="line">&lt;main <span class="built_in">class</span>=<span class="string">"flex-center"</span>&gt;</div><div class="line">  &lt;<span class="keyword">div</span>&gt;</div><div class="line">    I'm an element <span class="keyword">that</span> <span class="keyword">is</span> block-like <span class="keyword">with</span> <span class="keyword">my</span> siblings <span class="keyword">and</span> we're centered <span class="keyword">in</span> a row.</div><div class="line">  &lt;/<span class="keyword">div</span>&gt;</div><div class="line">  &lt;<span class="keyword">div</span>&gt;</div><div class="line">    I'm an element <span class="keyword">that</span> <span class="keyword">is</span> block-like <span class="keyword">with</span> <span class="keyword">my</span> siblings <span class="keyword">and</span> we're centered <span class="keyword">in</span> a row. I have more content <span class="keyword">in</span> <span class="keyword">me</span> than <span class="keyword">my</span> siblings do.</div><div class="line">  &lt;/<span class="keyword">div</span>&gt;</div><div class="line">  &lt;<span class="keyword">div</span>&gt;</div><div class="line">    I'm an element <span class="keyword">that</span> <span class="keyword">is</span> block-like <span class="keyword">with</span> <span class="keyword">my</span> siblings <span class="keyword">and</span> we're centered <span class="keyword">in</span> a row.</div><div class="line">  &lt;/<span class="keyword">div</span>&gt;</div><div class="line">&lt;/main&gt;</div></pre></td></tr></table></figure></p>
<p>CSS:<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.inline-block-center</span> &#123;</div><div class="line">  <span class="attribute">text-align</span>: center;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.inline-block-center</span> <span class="selector-tag">div</span> &#123;</div><div class="line">  <span class="attribute">display</span>: inline-block;</div><div class="line">  <span class="attribute">text-align</span>: left;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.flex-center</span> &#123;</div><div class="line">  <span class="attribute">display</span>: flex;</div><div class="line">  <span class="attribute">justify-content</span>: center;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>除非你是想让多个块级元素堆积在彼此的顶部（一列堆积啦），那么 <code>margin: auto</code> 还是依然适用的：<br>CSS:<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">main</span> <span class="selector-tag">div</span> &#123;</div><div class="line">  <span class="attribute">background</span>: black;</div><div class="line">  <span class="attribute">margin</span>: <span class="number">0</span> auto;</div><div class="line">  <span class="attribute">color</span>: white;</div><div class="line">  <span class="attribute">padding</span>: <span class="number">15px</span>;</div><div class="line">  <span class="attribute">margin</span>: <span class="number">5px</span> auto;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="垂直居中"><a href="#垂直居中" class="headerlink" title="垂直居中"></a>垂直居中</h2><p>在CSS里，垂直居中是有那么一点点麻烦了。</p>
<h3 id="行内或者具有行内元素性质的元素（比如文字或者链接）？-1"><a href="#行内或者具有行内元素性质的元素（比如文字或者链接）？-1" class="headerlink" title="行内或者具有行内元素性质的元素（比如文字或者链接）？"></a>行内或者具有行内元素性质的元素（比如文字或者链接）？</h3><h4 id="单行？"><a href="#单行？" class="headerlink" title="单行？"></a>单行？</h4><p>有时候行内元素或者文字显示为垂直居中，仅仅是因为它们的上下内边距相等：<br>CSS:<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.link</span> &#123;</div><div class="line">  <span class="attribute">padding-top</span>: <span class="number">30px</span>;</div><div class="line">  <span class="attribute">padding-bottom</span>: <span class="number">30px</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>如果 padding 出于某些原因不能用，并且你要使一些不换行的文字居中，这里有一个技巧，就是设置文字的 <code>line-height</code> 和 <code>height</code>  的值相等。<br>CSS:<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.center-text-trick</span> &#123;</div><div class="line">  <span class="attribute">height</span>: <span class="number">100px</span>;</div><div class="line">  <span class="attribute">line-height</span>: <span class="number">100px</span>;</div><div class="line">  <span class="attribute">white-space</span>: nowrap;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h4 id="多行？"><a href="#多行？" class="headerlink" title="多行？"></a>多行？</h4><p>上边距和下边距相等也能让多行文字达到垂直居中的效果，但是如果这种方法不奏效的话，可能需要设置文字所在的元素为一个 <code>table cell</code>，不管它直接是 <code>table</code> 还是你用CSS使这个元素表现的像一个 <code>table cell</code>，<code>vertical-align</code> 属性可以处理这种情况，它与我们通常所做的在行上处理元素对齐的方式不同：<br>CSS:<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">table</span> &#123;</div><div class="line">  <span class="attribute">background</span>: white;</div><div class="line">  <span class="attribute">width</span>: <span class="number">240px</span>;</div><div class="line">  <span class="attribute">border-collapse</span>: separate;</div><div class="line">  <span class="attribute">margin</span>: <span class="number">20px</span>;</div><div class="line">  <span class="attribute">height</span>: <span class="number">250px</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-tag">table</span> <span class="selector-tag">td</span> &#123;</div><div class="line">  <span class="attribute">background</span>: black;</div><div class="line">  <span class="attribute">color</span>: white;</div><div class="line">  <span class="attribute">padding</span>: <span class="number">20px</span>;</div><div class="line">  <span class="attribute">border</span>: <span class="number">10px</span> solid white;</div><div class="line">  <span class="comment">/* default is vertical-align: middle; */</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-class">.center-table</span> &#123;</div><div class="line">  <span class="attribute">display</span>: table;</div><div class="line">  <span class="attribute">height</span>: <span class="number">250px</span>;</div><div class="line">  <span class="attribute">background</span>: white;</div><div class="line">  <span class="attribute">width</span>: <span class="number">240px</span>;</div><div class="line">  <span class="attribute">margin</span>: <span class="number">20px</span>;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.center-table</span> <span class="selector-tag">p</span> &#123;</div><div class="line">  <span class="attribute">display</span>: table-cell;</div><div class="line">  <span class="attribute">margin</span>: <span class="number">0</span>;</div><div class="line">  <span class="attribute">background</span>: black;</div><div class="line">  <span class="attribute">color</span>: white;</div><div class="line">  <span class="attribute">padding</span>: <span class="number">20px</span>;</div><div class="line">  <span class="attribute">border</span>: <span class="number">10px</span> solid white;</div><div class="line">  <span class="attribute">vertical-align</span>: middle;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.flex-center-vertically</span> &#123;</div><div class="line">  <span class="attribute">display</span>: flex;</div><div class="line">  <span class="attribute">justify-content</span>: center;</div><div class="line">  <span class="attribute">flex-direction</span>: column;</div><div class="line">  <span class="attribute">height</span>: <span class="number">400px</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>如果没法用类table方式，可能你需要用 <code>flexbox</code> ？单个的 <code>flex</code> 子元素可以非常简单的被一个 <code>flex</code> 父元素垂直居中：<br>CSS:<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.flex-center-vertically</span> &#123;</div><div class="line">  <span class="attribute">display</span>: flex;</div><div class="line">  <span class="attribute">justify-content</span>: center;</div><div class="line">  <span class="attribute">flex-direction</span>: column;</div><div class="line">  <span class="attribute">height</span>: <span class="number">400px</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>请记住这个方法仅仅适用于父容器具有一个固定的额高度（px，%，等等），这也是为什么容器有一个高度。</p>
<p>如果上面的方法都不能用，你可以试试 ”虚元素“ 技术：其中一个完整高度的伪元素放置在容器内，并与文本垂直对齐。<br>CSS:<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.ghost-center</span> &#123;</div><div class="line">  <span class="attribute">position</span>: relative;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.ghost-center</span><span class="selector-pseudo">::before</span> &#123;</div><div class="line">  <span class="attribute">content</span>: <span class="string">" "</span>;</div><div class="line">  <span class="attribute">display</span>: inline-block;</div><div class="line">  <span class="attribute">height</span>: <span class="number">100%</span>;</div><div class="line">  <span class="attribute">width</span>: <span class="number">1%</span>;</div><div class="line">  <span class="attribute">vertical-align</span>: middle;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.ghost-center</span> <span class="selector-tag">p</span> &#123;</div><div class="line">  <span class="attribute">display</span>: inline-block;</div><div class="line">  <span class="attribute">vertical-align</span>: middle;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="块级元素？"><a href="#块级元素？" class="headerlink" title="块级元素？"></a>块级元素？</h3><h4 id="知道元素的高度？"><a href="#知道元素的高度？" class="headerlink" title="知道元素的高度？"></a>知道元素的高度？</h4><p>不知道元素的高度是比较常见的，有很多原因：如果宽度改变，文本回流会改变高度；文字样式改变会改变高度；文字数量改变会改变高度；一个固定比例的元素，比如图片，当重置尺寸的时候也会改变高度，等等。</p>
<p>但如果你知道高度，你可以这样垂直居中元素：<br>CSS:<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.parent</span> &#123;</div><div class="line">  <span class="attribute">position</span>: relative;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.child</span> &#123;</div><div class="line">  <span class="attribute">position</span>: absolute;</div><div class="line">  <span class="attribute">top</span>: <span class="number">50%</span>;</div><div class="line">  <span class="attribute">height</span>: <span class="number">100px</span>;</div><div class="line">  <span class="attribute">margin-top</span>: -<span class="number">50px</span>; <span class="comment">/* account for padding and border if not using box-sizing: border-box; */</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h4 id="元素高度未知？"><a href="#元素高度未知？" class="headerlink" title="元素高度未知？"></a>元素高度未知？</h4><p>可以通过 <code>transform</code> 来达到目的：<br>CSS:<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="selector-class">.parent</span> &#123;</div><div class="line">  <span class="attribute">position</span>: relative;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.child</span> &#123;</div><div class="line">  <span class="attribute">position</span>: absolute;</div><div class="line">  <span class="attribute">top</span>: <span class="number">50%</span>;</div><div class="line">  <span class="attribute">transform</span>: <span class="built_in">translateY</span>(-50%);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h4 id="能用-flexbox-吗？"><a href="#能用-flexbox-吗？" class="headerlink" title="能用 flexbox 吗？"></a>能用 flexbox 吗？</h4><p>毫无疑问，用 <code>flexbox</code> 简单太多了：<br>CSS:<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.parent</span> &#123;</div><div class="line">  <span class="attribute">display</span>: flex;</div><div class="line">  <span class="attribute">flex-direction</span>: column;</div><div class="line">  <span class="attribute">justify-content</span>: center;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="垂直水平居中"><a href="#垂直水平居中" class="headerlink" title="垂直水平居中"></a>垂直水平居中</h2><p>你可以通过不同的方式结合上面的技术来得到一个完美的居中水平垂直居中元素。但是我发现，这些方法通常都属于以下三种阵营：</p>
<h3 id="元素有固定的宽和高？"><a href="#元素有固定的宽和高？" class="headerlink" title="元素有固定的宽和高？"></a>元素有固定的宽和高？</h3><p>用负的 <code>margin</code> 值使其等于宽度和高度的一半，当你设置了它的绝对位置为 50% 之后，就会得到一个很棒的跨浏览器支持的居中：<br>CSS;<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.parent</span> &#123;</div><div class="line">  <span class="attribute">position</span>: relative;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-class">.child</span> &#123;</div><div class="line">  <span class="attribute">width</span>: <span class="number">300px</span>;</div><div class="line">  <span class="attribute">height</span>: <span class="number">100px</span>;</div><div class="line">  <span class="attribute">padding</span>: <span class="number">20px</span>;</div><div class="line"></div><div class="line">  <span class="attribute">position</span>: absolute;</div><div class="line">  <span class="attribute">top</span>: <span class="number">50%</span>;</div><div class="line">  <span class="attribute">left</span>: <span class="number">50%</span>;</div><div class="line"></div><div class="line">  <span class="attribute">margin</span>: -<span class="number">70px</span> <span class="number">0</span> <span class="number">0</span> -<span class="number">170px</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="元素的宽和高未知？"><a href="#元素的宽和高未知？" class="headerlink" title="元素的宽和高未知？"></a>元素的宽和高未知？</h3><p>如果你不知道元素的高度和宽度，你可以用 <code>transform</code> 属性，用 <code>translate</code> 设置 -50%（它以元素当前的宽和高为基础）来居中：<br>CSS：<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.parent</span> &#123;</div><div class="line">  <span class="attribute">position</span>: relative;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.child</span> &#123;</div><div class="line">  <span class="attribute">position</span>: absolute;</div><div class="line">  <span class="attribute">top</span>: <span class="number">50%</span>;</div><div class="line">  <span class="attribute">left</span>: <span class="number">50%</span>;</div><div class="line">  <span class="attribute">transform</span>: <span class="built_in">translate</span>(-50%, -50%);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="能用-flexbox-吗？-1"><a href="#能用-flexbox-吗？-1" class="headerlink" title="能用 flexbox 吗？"></a>能用 flexbox 吗？</h3><p>为了让元素在 <code>flexbox</code> 两个方向都居中，你需要两个居中属性：<br>CSS:<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.parent</span> &#123;</div><div class="line">  <span class="attribute">display</span>: flex;</div><div class="line">  <span class="attribute">justify-content</span>: center;</div><div class="line">  <span class="attribute">align-items</span>: center;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h2><p>你完全可以用CSS来居中元素，lol</p>
]]></content>
      
        <categories>
            
            <category> 学着 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> CSS </tag>
            
            <tag> 布局 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[在Hexo博客里插入Emoji表情]]></title>
      <url>http://github.com/Eamonnzhang/2016/01/22/%E5%A6%82%E4%BD%95%E5%9C%A8%E5%8D%9A%E5%AE%A2%E9%87%8C%E6%8F%92%E5%85%A5emoji%E8%A1%A8%E6%83%85/</url>
      <content type="html"><![CDATA[<img src="http://ww2.sinaimg.cn/large/71d81503gw1f0819prps4j20v40g8n5g.jpg" class="full-image">
<a id="more"></a>
<h2 id="此方法已经失效！！！！！"><a href="#此方法已经失效！！！！！" class="headerlink" title="此方法已经失效！！！！！"></a>此方法已经失效！！！！！</h2><p>由于 <a href="https://github.com/muan/emoji">Emoji</a> 表情实在是太魔性了，有些东西不用它还真的难以用语言来表达出来。</p>
<p>起初我以为在 Hexo 博客里插入 Emoji 是一件极其简单的事情。貌似 Jekyll 直接就支持 <code>:joy:</code>这种双冒号的书写形式，然后在它渲染 Markdown 文件的时候，会自动转换成相关的 HTML 标签，插入一个 Emoji。<br>后来我在 Hexo 博客里尝试了一下，果然，没成功（成功了就不叫折腾了= =），Hexo 只是原封不动的把字符串 “:joy:” 渲染上去了。<br>所以该怎么办？提供几种思路：</p>
<h3 id="更改-Markdown-渲染引擎"><a href="#更改-Markdown-渲染引擎" class="headerlink" title="更改 Markdown 渲染引擎"></a>更改 Markdown 渲染引擎</h3><p> Hexo 的渲染引擎是 Marked，Hexo3.0 版本的渲染引擎也支持 GitHub Flavored。我查阅了网上很多的支持 Emoji 的开源的 Markdown 引擎，确实找到了一些比如 <a href="https://github.com/jbt/Markdown-editor">Markdown Editor</a>，不够后来我才发现，这些引擎或多或少都是在很多官方引擎的基础上加入了自己的拓展功能，才实现了能够渲染 Emoji。不过 Hexo 不能随意的将默认渲染引擎切换到这些第三方渲染引擎中来，顶多就是开启或者关闭一下 GitHub Flavored。此路不通，换一条路。</p>
<h3 id="找相关的-Hexo-插件"><a href="#找相关的-Hexo-插件" class="headerlink" title="找相关的 Hexo 插件"></a>找相关的 Hexo 插件</h3><p> 打开 Hexo 的 <a href="https://github.com/hexojs/hexo/issues">Issue</a>，搜索 Emoji：<br> <img src="http://ww2.sinaimg.cn/large/71d81503gw1f082fjxe1tj20ry08975l.jpg" alt=""><br> 搜到上面的这么少的结果，我的内心是崩溃的，T T，打开之后，就了解到了 <a href="https://github.com/sergiolepore/hexo-tag-emojis">hexo-tag-emojis</a>，按照官方的文档装完之后，各种问题。后来查了这个插件的 Issue 才知道，这个插件已经不能友好支持 Hexo3.0 以上版本了。但是我按照 Issue 里支持 Hexo3.0 的用法用，依然出现各种问题。我提了一个 <a href="https://github.com/sergiolepore/hexo-tag-emojis/issues/11">Issue</a> 上去，估计作者也不会理吧，毕竟很久没更了。不过还好，用了这个插件之后，会把 emoji 的大部分 PNG 图片都安装到 source 目录下的 <code>/images/Emojis</code>。</p>
<h3 id="自己想办法搞定"><a href="#自己想办法搞定" class="headerlink" title="自己想办法搞定"></a>自己想办法搞定</h3><p> 这真的是不得已而为之方法，xxx教导我们：</p>
<blockquote>
<p>不要重复造轮子！<br>不要重复造轮子！<br>不要重复造轮子！</p>
</blockquote>
<p> 这些年就是靠着这些（jie）话（kou），导致我一步一步成为搬砖的民工（脸红）。<br> 那就从上面提到的 hexo-tag-emojis 开始下手吧，其实这个插件比较简单，只有一个<code>index.js</code>，里面注册了两个标签，选一个 <code>emoji</code> 标签看一下：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">hexo.extend.tag.register(<span class="string">'emoji'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">args, content</span>)</span>&#123;</div><div class="line"> <span class="keyword">var</span> emojiName = args[<span class="number">0</span>]; <span class="comment">// emojiNameWithoutColons argument</span></div><div class="line"> <span class="keyword">var</span> emojiSize = args[<span class="number">1</span>] || defaultEmojiSize;</div><div class="line"> <span class="keyword">var</span> classes = args[<span class="number">2</span>] || <span class="string">""</span>;</div><div class="line"> <span class="keyword">var</span> imgAttr = &#123;&#125;;</div><div class="line">	</div><div class="line"> <span class="keyword">if</span> (!emojiConfig || !emojiPrefix) &#123;</div><div class="line">     <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'Emoji configuration was not found.'</span>);</div><div class="line"> &#125;</div><div class="line">	</div><div class="line"> classes = classes.split(<span class="string">','</span>);</div><div class="line"> classes.push(<span class="string">'emoji'</span>);</div><div class="line"> classes.push(<span class="string">'nofancybox'</span>);</div><div class="line">	</div><div class="line"> imgAttr.src = emojiPrefix +<span class="string">'/'</span>+emojiName+<span class="string">'.png'</span>;</div><div class="line"> imgAttr.width = emojiSize;</div><div class="line"> imgAttr.height = emojiSize;</div><div class="line"> imgAttr.class = classes.join(<span class="string">' '</span>);</div><div class="line"> imgAttr.title = emojiName;</div><div class="line">	</div><div class="line"> <span class="keyword">return</span> htmlTag(<span class="string">'img'</span>, imgAttr);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>上面这段代码的目的只有一个，就是让 Hexo 能够识别你在 Markdown 文件里写<br><figure class="highlight gcode"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&#123; <span class="meta">%</span> emoji ar<span class="name">g0</span> ar<span class="name">g1</span> ... <span class="meta">%</span> &#125; 注：（ &#123; 和 <span class="meta">%</span> 之间是没有空格的）</div></pre></td></tr></table></figure></p>
<p>然后获取相应的参数来返回特定的 HTML 标签。实际上就是一个 IMG 标签嘛！但是不知道为何，里面的 emoji 类和 nofancybox 类貌似在 Hexo3.0 版本里失效了，不知道是因为 NexT 主题的冲突还是什么原因。我直接在 Markdown 里写：<br><figure class="highlight cs"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;img src=<span class="string">"/images/emojis/joy.png"</span> <span class="keyword">class</span>=<span class="string">"emoji nofancybox"</span> /&gt;</div></pre></td></tr></table></figure></p>
<p>发现并没有什么卵用，样式没有改变。后来参考了NextT主题自己的<code>full-image</code>的写法，在 NexT 主题的<code>source\css\_common\components\tags\</code>目录下写了一个<code>emoji-image</code>样式：<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.emoji-image</span><span class="selector-class">.emoji-image</span><span class="selector-class">.emoji-image</span>&#123;</div><div class="line">  <span class="attribute">border</span>: none;</div><div class="line">  <span class="attribute">float</span>: left; <span class="comment">//为什么要float: left？后面解释</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>然后写了函数一个注册了一下标签：<br><figure class="highlight maxima"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">function emojiImage(<span class="built_in">args</span>) &#123;</div><div class="line"> <span class="built_in">args</span> = <span class="built_in">args</span>.<span class="built_in">join</span>(' ').<span class="built_in">split</span>(',');</div><div class="line"> <span class="built_in">var</span> src = <span class="built_in">args</span>[<span class="number">0</span>];</div><div class="line"> <span class="built_in">var</span> size = <span class="built_in">args</span>[<span class="number">1</span>] || '';</div><div class="line"> <span class="built_in">var</span> <span class="built_in">title</span> = <span class="built_in">args</span>[<span class="number">2</span>] || '';</div><div class="line">	  </div><div class="line"> <span class="keyword">if</span> (!src) &#123;</div><div class="line">   hexo.<span class="built_in">log</span>.warn('Image src can NOT be empty');</div><div class="line"> &#125;</div><div class="line"> size = size.trim();</div><div class="line"> <span class="built_in">title</span> = <span class="built_in">title</span>.trim();</div><div class="line">	  </div><div class="line"> <span class="built_in">var</span> <span class="built_in">image</span> = ['&lt;img src=<span class="string">"/images/emojis/' + src + '.png"</span> class=<span class="string">"emoji-image"</span>'];</div><div class="line"> size.<span class="built_in">length</span> &gt; <span class="number">0</span> &amp;&amp; <span class="built_in">image</span>.<span class="built_in">push</span>('<span class="built_in">width</span>=<span class="string">"' + size + 'px"</span>');</div><div class="line"> <span class="built_in">title</span>.<span class="built_in">length</span> &gt; <span class="number">0</span> &amp;&amp; <span class="built_in">image</span>.<span class="built_in">push</span>('<span class="built_in">title</span>=<span class="string">"' + title + '"</span>');</div><div class="line"> <span class="built_in">image</span>.<span class="built_in">push</span>('/&gt;');</div><div class="line">	  </div><div class="line"> <span class="built_in">return</span> <span class="built_in">image</span>.<span class="built_in">join</span>(' ');</div><div class="line">&#125;</div><div class="line"></div><div class="line">hexo.extend.tag.register('emojiImage', emojiImage);</div><div class="line">hexo.extend.tag.register('ei', emojiImage);</div></pre></td></tr></table></figure></p>
<p>这样的话，只要在 Mardown 文件里写 <code>{ % ei emojiName size % }</code> 就可以转换成对应尺寸的 Emoji 表情。<br>比如我写<br><figure class="highlight gcode"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&#123; <span class="meta">%</span> ei cry,<span class="number">32</span> <span class="meta">%</span> &#125; 注：（ &#123; 和 <span class="meta">%</span> 之间是没有空格的）</div></pre></td></tr></table></figure></p>
<p>显示：</p>
<h3 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h3><p>使用这样的方式插入 Emoji 表情，在 fancybox 效果（可以点击图片，出现模态框来浏览图片）默认开启的情况下，只能插入一行文字的最左侧。<br>其实最好的方式是能插在一句话的任何地方：比如<code>Hello，[emoji]Hexo！</code>但前提是你要把 NextT 主题配置文件的<code>fancybox: true</code>改为<code>false</code>，然后把 emoji-image 样式中的<code>float: left</code> 去掉就ok了。<br>对于一个强迫症的我来说，我还是比较喜欢fancybox的效果的，不忍心为了能在任何地方插入 Emoji，就关闭fancybox的效果。<br>所以终极的解决方案是：</p>
<blockquote>
<p>能够控制每一张图片是否自带 fancybox 效果，把是 Emoji 的图片 fancybox 的效果去掉，其他图片保留。</p>
</blockquote>
<p>我想 hexo-tags-emojis 作者的 nofancybox 类也是想实现这个效果，但不知为何失效。<br>我在 NexT 主题下提了一个 <a href="https://github.com/iissnan/hexo-theme-next/issues/618">Issue</a>，实现能够在一行文字之间插入图片也是可以的，这样也不仅仅局限于只能插入 Emoji 表情了。</p>
<p>就酱，生命不息，折腾不止。</p>
]]></content>
      
        <categories>
            
            <category> 折腾着 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> Emoji </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[两个第一]]></title>
      <url>http://github.com/Eamonnzhang/2016/01/21/%E4%B8%A4%E4%B8%AA%E7%AC%AC%E4%B8%80/</url>
      <content type="html"><![CDATA[<img src="http://ww2.sinaimg.cn/large/71d81503gw1f076xlielbj21kw1667wh.jpg" class="full-image">
<a id="more"></a>
<p>今天早上起床，看到上面这个场景：整个人是为之一振的。<br>后来出门准备拿楼道里被我放了好几天的伞，然后发现伞不见了= =。<br>算了，出门感受大自然吧。<br>不管怎么说，这是来武汉后的第一场雪，也是来武汉丢的第一把伞。</p>
]]></content>
      
        <categories>
            
            <category> 活着 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 随笔 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[换电脑也能同步更新Hexo博客]]></title>
      <url>http://github.com/Eamonnzhang/2016/01/20/%E6%8D%A2%E7%94%B5%E8%84%91%E4%B9%9F%E8%83%BD%E5%90%8C%E6%AD%A5%E6%9B%B4%E6%96%B0Hexo%E5%8D%9A%E5%AE%A2/</url>
      <content type="html"><![CDATA[<p>由于Hexo向代码托管网站上部署的永远都是自己生成的内容，假如换了电脑，就算把GitHub或者GitCafe上的内容都<code>pull</code>下来，拿到的也只是生成内容，无法继续更新。那该怎么办？试想一下一台电脑能够更新Hexo博客所必备的条件是什么：<br><a id="more"></a></p>
<ol>
<li>Hexo环境及其依赖包</li>
<li>Git版本控制工具</li>
<li>上一次更新后的<strong>源代码</strong><br><img src="http://ww2.sinaimg.cn/mw690/71d81503gw1f06bbhq2svj20hs0bcn0c.jpg" alt=""><br><strong>源代码</strong>即指如上图所示红框中的目录结构。</li>
</ol>
<p>1和2可以自己手动重新装，那么最重要的就是同步第三个东西。<br>简单查了一下，有以下几种方式：</p>
<ol>
<li>在GitHub上有一个<strong>hexo-git-backup</strong>项目，可以尝试</li>
<li>利用云盘实时同步整个博客内容（这个没用过）</li>
<li>利用<strong>Git分支</strong>，一个分支同步整个博客内容，一个分支用来发布博客，Git玩儿的转的人可以尝试</li>
<li>把必要的东西放在一个新的<strong>Repo</strong>上</li>
</ol>
<p>我选择了第四种方式，可以自己找一个托管网站，最好是能免费创建私有项目的那一种。把上图中红框的内容<code>push</code>上去，<em>这里注意删除根目录以及主题文件夹下的git文件，否则在<code>push</code>过程中会报错</em>。<br>接下来，在每次<code>hexo d</code>之后，在<code>git push</code>一下就可以做到实时更新源代码了。<br>如果换了电脑，只需要把源代码克隆下来，然后安装所必要环境，就能愉快的更新的博客了。</p>
<h4 id="Tips："><a href="#Tips：" class="headerlink" title="Tips："></a>Tips：</h4><p>如果怕忘记执行那条命令，不妨把每次都需要输入的命令都放进bat文件里，写完博客直接执行bat文件。<br><code>preview.bat</code>用来预览：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">hexo g </div><div class="line">hexo s -p 5000</div></pre></td></tr></table></figure></p>
<p><code>hexo.bat</code> 用来发布以及同步源代码<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">hexo g</div><div class="line">hexo d</div><div class="line">git add --all</div><div class="line">git commit</div><div class="line">git push</div></pre></td></tr></table></figure></p>
<p><code>clean.bat</code>用来修复NexT主题的bug（首页只显示一篇文章）<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">hexo clean</div><div class="line">hexo g</div><div class="line">hexo g</div><div class="line">hexo d</div><div class="line">git add --all</div><div class="line">git commit</div><div class="line">git push</div></pre></td></tr></table></figure></p>
]]></content>
      
        <categories>
            
            <category> 学着 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[又搭了一次博客]]></title>
      <url>http://github.com/Eamonnzhang/2016/01/19/%E5%8F%88%E6%90%AD%E4%BA%86%E4%B8%80%E6%AC%A1%E5%8D%9A%E5%AE%A2/</url>
      <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>时隔了大概两年时间，又重新把博客搭了一遍。上一次搭建还是因为初次接触<code>git</code>，由<code>git</code>又接触了GitHub，接着就了解到了GitHubPages。当时还身为一个渣渣的我，感觉能有一个自己的域名（其实就是username.github.io），让别人来访问自己的东西好高端。当时因为刚接触<code>git</code>和GitHub，根据官方的建议，用Jekyll搭建了将近快一个星期（请忽略时间，哈哈 :-)）才把博客搭好，还丑的要死。然后中间更新了几篇学习《Thinking in Java》的学习笔记，后来因为各种各样的原因就停更了，当时真的以为自己以后会和Java干上的，但世事无常啊。</p>
<p>到了今天，两年时间，阴差阳错的来到了一个不毛之地，然后开始了前端之路。前几天上GitHub的时候发现一大神级人物的同学开博了，然后才想起来我还有一个博客在闲着。于是上个星期赶紧搞完手头的工作，开始了又一次的搭博之旅。<br><a id="more"></a><br>这次选择了<strong>Hexo</strong>。Hexo确实比Jekyll搭建起来要方便很多，主题也很多，我选了最热门的<strong>NexT</strong>主题。</p>
<p>搭博的教程网上多的简直不能再多，不再赘述了，只说一下大致思路和步骤。</p>
<h3 id="创建Pages"><a href="#创建Pages" class="headerlink" title="创建Pages"></a>创建Pages</h3><p>在GitHub上和GitCafe上都创建一个自己的pages，创建两个是因为防止哪一个被查了，另外一个还能无压力访问。也可以作为一个国外访问，一个国内访问。</p>
<h3 id="初始化安装环境"><a href="#初始化安装环境" class="headerlink" title="初始化安装环境"></a>初始化安装环境</h3><p>把Hexo一堆相关的东西都npm进来，如果用了某个主题，也把主题都装进来，还有别忘了装Git，然后用<code>hexo init</code>初始化一个文件夹</p>
<h3 id="配置-config-yml"><a href="#配置-config-yml" class="headerlink" title="配置_config.yml"></a>配置_config.yml</h3><p>主要是配置站点和主题的配置文件（站点和主体都对应有一个配置文件）。<br>配置的时候注意语法，yml的语法是要在冒号后面留一个空格的，不然编译出错。<br>最主要的配置是添加<code>deploy</code>选项内容，把GitCafe和GitHub的<code>repository</code>都添加进来，方便用<code>hexo d</code>的时候可以直接部署到相关Pages上。</p>
<h3 id="添加SSH"><a href="#添加SSH" class="headerlink" title="添加SSH"></a>添加SSH</h3><p>上面配置里面添加了<code>deploy</code>，如果你不添加SSH，直接<code>hexo d</code>是无法部署上去的，GitHub和GitCafe会拒绝访问的，所以需要添加SSH。</p>
<h3 id="绑定域名"><a href="#绑定域名" class="headerlink" title="绑定域名"></a>绑定域名</h3><p>选择一个域名注册商，比如阿里云。注册一个自己心仪的域名，然后把GitHub和GitCafe相对应的博客地址都解析到域名里面，海外解析GitHub，默认解析GitCafe，解析的时候选择CNAME方式。</p>
<h3 id="博客细节优化"><a href="#博客细节优化" class="headerlink" title="博客细节优化"></a>博客细节优化</h3><p>比如加入多说评论（其实我是感觉国外的DISCUSS要比多说的界面更简洁一点，无奈被墙啊）、加入阅读次数等等，这些内容大都和主题相关性比较大，所以选择一个社区良好的主题很重要，大部分你遇到的问题别人也都会遇到。这里再次感谢<strong>NexT</strong>主题。</p>
<h3 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h3><p>其实搭建博客是一个很有意思的过程，上面的每一个步骤都能学到很多东西。但是写博客就不一定啦，哈哈。</p>
<p>关于用Hexo搭建博客有一个比较头疼的问题就是，如果换了电脑怎么办？Hexo不像Jekyll，直接把源码放在Repo上，换了电脑pull下来就可以了。Hexo是把自己的生成内容<code>push</code>上去了，那怎么样可以在那台电脑上都可以获取到Hexo的源码文件夹呢？下一篇会简单介绍一下我自己的解决方式。</p>
]]></content>
      
        <categories>
            
            <category> 学着 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
        
    </entry>
    
  
  
</search>
